{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Steve\\\\Desktop\\\\Prueba Hilos\\\\react-coding-challenges\\\\chatter\\\\src\\\\components\\\\Messages\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport useSound from \"use-sound\";\nimport config from \"../../../config\";\nimport LatestMessagesContext from \"../../../contexts/LatestMessages/LatestMessages\";\nimport TypingMessage from \"./TypingMessage\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Message from \"./Message\";\nimport INITIAL_BOTTY_MESSAGE from \"../../../common/constants/initialBottyMessage\";\nimport \"../styles/_messages.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: [\"websocket\", \"polling\", \"flashsocket\"]\n});\nconst ME = \"me\";\nconst BOT = \"bot\";\nconst INIT_MSG = {\n  id: Date.now(),\n  user: BOT,\n  message: INITIAL_BOTTY_MESSAGE\n};\n\nfunction Messages() {\n  _s();\n\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const {\n    setLatestMessage\n  } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([INIT_MSG]);\n  const [botTyping, setBotTyping] = useState(false);\n  useEffect(() => {\n    socket.off(\"bot-message\");\n    socket.on(\"bot-message\", message => {\n      setBotTyping(false);\n      setMessages([...messages, {\n        message,\n        user: BOT,\n        id: Date.now()\n      }]);\n      setLatestMessage(BOT, message);\n    });\n  }, [messages]);\n\n  const sendMessage = () => {\n    setMessages([...messages, {\n      id: Date.now(),\n      user: ME,\n      message: message\n    }]);\n    socket.emit(\"user-message\", message);\n    setMessage(\"\");\n    document.getElementById(\"user-message-input\").value = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages__list\",\n      id: \"message-list\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n        nextMessage: messages[index + 1],\n        message: message,\n        botTyping: botTyping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      message: message,\n      sendMessage: sendMessage,\n      onChangeMessage: e => setMessage(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messages, \"p09MuB9uT6iJhIm75aXLMDRIpsg=\", false, function () {\n  return [useSound, useSound];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["C:/Users/Steve/Desktop/Prueba Hilos/react-coding-challenges/chatter/src/components/Messages/components/Messages.js"],"names":["React","useContext","useState","useEffect","io","useSound","config","LatestMessagesContext","TypingMessage","Header","Footer","Message","INITIAL_BOTTY_MESSAGE","socket","BOT_SERVER_ENDPOINT","transports","ME","BOT","INIT_MSG","id","Date","now","user","message","Messages","playSend","SEND_AUDIO_URL","playReceive","RECEIVE_AUDIO_URL","setLatestMessage","setMessage","messages","setMessages","botTyping","setBotTyping","off","on","sendMessage","emit","document","getElementById","value","map","index","e","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport useSound from \"use-sound\";\r\nimport config from \"../../../config\";\r\nimport LatestMessagesContext from \"../../../contexts/LatestMessages/LatestMessages\";\r\nimport TypingMessage from \"./TypingMessage\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Message from \"./Message\";\r\nimport INITIAL_BOTTY_MESSAGE from \"../../../common/constants/initialBottyMessage\";\r\nimport \"../styles/_messages.scss\";\r\n\r\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\r\n  transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n});\r\n\r\nconst ME = \"me\";\r\nconst BOT = \"bot\";\r\n\r\nconst INIT_MSG = {\r\n  id: Date.now(),\r\n  user: BOT,\r\n  message: INITIAL_BOTTY_MESSAGE,\r\n};\r\n\r\nfunction Messages() {\r\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\r\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\r\n\r\n  const { setLatestMessage } = useContext(LatestMessagesContext);\r\n\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [messages, setMessages] = useState([INIT_MSG]);\r\n\r\n  const [botTyping, setBotTyping] = useState(false);\r\n\r\n  useEffect(() => {\r\n    socket.off(\"bot-message\");\r\n    socket.on(\"bot-message\", (message) => {\r\n      setBotTyping(false);\r\n\r\n      setMessages([...messages, { message, user: BOT, id: Date.now() }]);\r\n\r\n      setLatestMessage(BOT, message);\r\n    });\r\n  }, [messages]);\r\n\r\n  const sendMessage = () => {\r\n    setMessages([...messages, { id: Date.now(), user: ME, message: message }]);\r\n    socket.emit(\"user-message\", message);\r\n    setMessage(\"\");\r\n    document.getElementById(\"user-message-input\").value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"messages\">\r\n      <Header />\r\n      <div className=\"messages__list\" id=\"message-list\">\r\n        {messages.map((message, index) => (\r\n          <Message\r\n            nextMessage={messages[index + 1]}\r\n            message={message}\r\n            botTyping={botTyping}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Footer\r\n        message={message}\r\n        sendMessage={sendMessage}\r\n        onChangeMessage={(e) => setMessage(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Messages;\r\n"]},"metadata":{},"sourceType":"module"}